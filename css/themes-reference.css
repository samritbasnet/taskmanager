/* ===== REFERENCE FILE - themes.css ===== */
/*
This reference file shows how to implement themes using CSS variables.
Study this to understand theme systems, then build your own!

LEARNING POINTS:
1. CSS Custom Properties (Variables)
2. Theme Switching Logic
3. Color System Design
4. Accessibility Considerations
5. Smooth Transitions
*/

/* ===== CSS VARIABLES (CUSTOM PROPERTIES) ===== */
/*
CSS variables allow you to store values and reuse them.
They make themes easy to implement and maintain.
*/
:root {
  /* ===== COLOR PALETTE ===== */
  /* Primary colors for your brand */
  --primary-color: #667eea;
  --secondary-color: #764ba2;

  /* Background colors */
  --background-color: #f8f9fa;
  --surface-color: rgba(255, 255, 255, 0.95);

  /* Text colors - Hierarchy is important */
  --text-primary: #333; /* Main text */
  --text-secondary: #666; /* Secondary text */
  --text-muted: #999; /* Muted text */

  /* Border colors */
  --border-color: #e0e0e0;

  /* Shadow colors */
  --shadow-color: rgba(0, 0, 0, 0.1);

  /* Status colors */
  --success-color: #4caf50;
  --danger-color: #ff6b6b;
  --warning-color: #ff9800;

  /* ===== GRADIENTS ===== */
  /* Reusable gradients */
  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --background-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

  /* ===== SHADOWS ===== */
  /* Consistent shadow system */
  --shadow-sm: 0 4px 15px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 8px 32px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 20px 60px rgba(0, 0, 0, 0.1);

  /* ===== TRANSITIONS ===== */
  /* Consistent animation timing */
  --transition: all 0.3s ease;
}

/* ===== DARK THEME ===== */
/*
Dark theme uses the same variable names but different values.
This makes switching themes simple.
*/
[data-theme="dark"] {
  /* ===== DARK COLOR PALETTE ===== */
  /* Adjusted colors for dark mode */
  --primary-color: #8b9dc3;
  --secondary-color: #a8b5d6;

  /* Dark backgrounds */
  --background-color: #1a1a1a;
  --surface-color: rgba(30, 30, 30, 0.95);

  /* Light text for dark backgrounds */
  --text-primary: #ffffff;
  --text-secondary: #cccccc;
  --text-muted: #888888;

  /* Dark borders */
  --border-color: #404040;

  /* Dark shadows */
  --shadow-color: rgba(0, 0, 0, 0.3);

  /* Adjusted status colors for dark mode */
  --success-color: #66bb6a;
  --danger-color: #ef5350;
  --warning-color: #ffb74d;

  /* ===== DARK GRADIENTS ===== */
  --primary-gradient: linear-gradient(135deg, #8b9dc3 0%, #a8b5d6 100%);
  --background-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);

  /* ===== DARK SHADOWS ===== */
  --shadow-sm: 0 4px 15px rgba(0, 0, 0, 0.2);
  --shadow-md: 0 8px 32px rgba(0, 0, 0, 0.3);
  --shadow-lg: 0 20px 60px rgba(0, 0, 0, 0.4);
}

/* ===== USING VARIABLES IN STYLES ===== */
/*
Now you can use these variables throughout your CSS.
When the theme changes, all elements update automatically.
*/
[data-theme="dark"] body {
  background: var(--background-gradient);
  color: var(--text-primary);
}

[data-theme="dark"] header {
  background: var(--surface-color);
  box-shadow: var(--shadow-md);
}

[data-theme="dark"] .task-manager {
  background: var(--surface-color);
  box-shadow: var(--shadow-lg);
}

[data-theme="dark"] .task-input {
  background: var(--background-color);
  border-color: var(--border-color);
  color: var(--text-primary);
}

[data-theme="dark"] .task-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(139, 157, 195, 0.1);
}

/* ===== THEME TOGGLE ANIMATION ===== */
/*
Smooth transitions when switching themes.
All elements with transitions will animate smoothly.
*/
body,
header,
.task-manager,
.task-input,
.task-item,
.task-controls-section,
.filter-btn {
  transition: var(--transition);
}

/* ===== THEME TOGGLE BUTTON ===== */
/*
The theme toggle button changes appearance based on theme.
Uses CSS pseudo-elements for icons.
*/
#theme-toggle {
  position: relative;
  overflow: hidden;
}

/* Background animation on hover */
#theme-toggle::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: var(--primary-gradient);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: var(--transition);
  z-index: -1;
}

#theme-toggle:hover::before {
  width: 100%;
  height: 100%;
}

/* ===== THEME ICONS ===== */
/*
Different icons for light and dark themes.
Uses CSS pseudo-elements to show appropriate icon.
*/
[data-theme="light"] #theme-toggle::after {
  content: "üåô"; /* Moon for light theme */
}

[data-theme="dark"] #theme-toggle::after {
  content: "‚òÄÔ∏è"; /* Sun for dark theme */
}

/* ===== ACCESSIBILITY FEATURES ===== */
/*
Respect user preferences for reduced motion.
Important for users with vestibular disorders.
*/
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}

/* ===== HIGH CONTRAST MODE ===== */
/*
Support for high contrast mode.
Important for users with visual impairments.
*/
@media (prefers-contrast: high) {
  :root {
    --primary-color: #000000;
    --text-primary: #000000;
    --background-color: #ffffff;
    --border-color: #000000;
  }

  [data-theme="dark"] {
    --primary-color: #ffffff;
    --text-primary: #ffffff;
    --background-color: #000000;
    --border-color: #ffffff;
  }
}

/* ===== SYSTEM PREFERENCE DETECTION ===== */
/*
Automatically detect user's system preference.
Provides better user experience.
*/
@media (prefers-color-scheme: dark) {
  :root {
    /* Auto-switch to dark theme if user prefers it */
    color-scheme: dark;
  }
}

/* ===== THEME SWITCHING LOGIC ===== */
/*
JavaScript will add/remove data-theme attribute.
CSS variables handle the rest automatically.

Example JavaScript:
document.documentElement.setAttribute('data-theme', 'dark');
document.documentElement.setAttribute('data-theme', 'light');
*/

/* ===== COMMENTS EXPLAINING THEME CONCEPTS ===== */

/*
THEME SYSTEM CONCEPTS TO LEARN:

1. CSS CUSTOM PROPERTIES (VARIABLES)
   - Define with --variable-name: value;
   - Use with var(--variable-name);
   - Scoped to :root or specific selectors
   - Can be overridden in different contexts

2. THEME SWITCHING
   - Use data attributes: [data-theme="dark"]
   - JavaScript changes the attribute
   - CSS variables update automatically
   - Smooth transitions between themes

3. COLOR THEORY
   - Primary colors: Brand identity
   - Secondary colors: Supporting elements
   - Semantic colors: Success, danger, warning
   - Accessibility: Contrast ratios

4. ACCESSIBILITY
   - High contrast mode support
   - Reduced motion preferences
   - Color blindness considerations
   - Screen reader compatibility

5. PERFORMANCE
   - CSS variables are efficient
   - No JavaScript required for styling
   - Smooth transitions
   - Minimal repaints

6. MAINTENANCE
   - Centralized color management
   - Easy to update themes
   - Consistent design system
   - Scalable architecture

7. USER PREFERENCES
   - System theme detection
   - User choice persistence
   - Automatic switching
   - Respect for accessibility

8. BROWSER SUPPORT
   - CSS variables: Modern browsers
   - Fallbacks for older browsers
   - Progressive enhancement
   - Graceful degradation
*/
