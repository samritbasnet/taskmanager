/* ===== REFERENCE FILE - style.css ===== */
/*
This is a reference file showing how your style.css should work.
Study this to understand CSS concepts, then build your own!

LEARNING POINTS:
1. CSS Reset - Why we reset margins/padding
2. Layout - How to structure the page
3. Typography - Font choices and hierarchy
4. Colors - Color theory and usage
5. Spacing - Consistent spacing system
6. Responsive Design - Mobile-first approach
*/

/* ===== CSS RESET EXAMPLE ===== */
/*
Why reset? Browsers have different default styles.
This ensures consistency across all browsers.
*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* ===== BODY STYLING EXAMPLE ===== */
/*
Body sets the foundation for your entire page.
Think of it as the canvas for your design.
*/
body {
  /* Font choices - Always provide fallbacks */
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;

  /* Line height for readability */
  line-height: 1.6;

  /* Text color */
  color: #333;

  /* Background - Can be solid or gradient */
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

  /* Full viewport height */
  min-height: 100vh;

  /* Padding around the page */
  padding: 20px;
}

/* ===== HEADER STYLING EXAMPLE ===== */
/*
Headers are often the first thing users see.
Make them visually appealing and functional.
*/
header {
  /* Glassmorphism effect */
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);

  /* Rounded corners */
  border-radius: 15px;

  /* Spacing inside */
  padding: 20px 30px;

  /* Space below header */
  margin-bottom: 30px;

  /* Shadow for depth */
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);

  /* Flexbox for layout */
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* ===== TITLE STYLING EXAMPLE ===== */
/*
Titles need to stand out and be memorable.
Gradient text is a modern trend.
*/
header h1 {
  /* Large, bold text */
  font-size: 2.5rem;
  font-weight: 700;

  /* Gradient text effect */
  background: linear-gradient(135deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* ===== BUTTON STYLING EXAMPLE ===== */
/*
Buttons should be clickable and provide feedback.
Always include hover states.
*/
#theme-toggle {
  /* Remove default button styles */
  background: none;
  border: 2px solid #667eea;

  /* Make it circular */
  border-radius: 50%;
  width: 50px;
  height: 50px;

  /* Icon size */
  font-size: 1.5rem;

  /* Show it's clickable */
  cursor: pointer;

  /* Smooth transitions */
  transition: all 0.3s ease;

  /* Center the icon */
  display: flex;
  align-items: center;
  justify-content: center;
}

/* ===== HOVER EFFECTS EXAMPLE ===== */
/*
Hover effects provide user feedback.
They make interfaces feel responsive.
*/
#theme-toggle:hover {
  background: #667eea;
  color: white;
  transform: scale(1.1);
}

/* ===== MAIN CONTAINER EXAMPLE ===== */
/*
Main containers hold your content.
They should be well-structured and responsive.
*/
.task-manager {
  /* Maximum width for desktop */
  max-width: 800px;

  /* Center horizontally */
  margin: 0 auto;

  /* Glassmorphism effect */
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);

  /* Rounded corners */
  border-radius: 20px;

  /* Shadow for depth */
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);

  /* Hide overflow */
  overflow: hidden;
}

/* ===== FORM STYLING EXAMPLE ===== */
/*
Forms need to be user-friendly and accessible.
Focus states are crucial for usability.
*/
.task-form {
  /* Flexbox for layout */
  display: flex;
  gap: 15px;
  align-items: center;
}

.task-input {
  /* Take remaining space */
  flex: 1;

  /* Comfortable padding */
  padding: 15px 20px;

  /* Subtle border */
  border: 2px solid #e0e0e0;
  border-radius: 10px;

  /* Readable font size */
  font-size: 1rem;

  /* Smooth transitions */
  transition: all 0.3s ease;

  /* Clean background */
  background: white;
}

/* ===== FOCUS STATES EXAMPLE ===== */
/*
Focus states are essential for accessibility.
They help keyboard users navigate.
*/
.task-input:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* ===== RESPONSIVE DESIGN EXAMPLE ===== */
/*
Mobile-first approach: Start with mobile, then enhance for desktop.
This ensures your app works on all devices.
*/
@media (max-width: 768px) {
  /* Reduce padding on mobile */
  body {
    padding: 10px;
  }

  /* Smaller header on mobile */
  header {
    padding: 15px 20px;
    margin-bottom: 20px;
  }

  /* Smaller title on mobile */
  header h1 {
    font-size: 2rem;
  }

  /* Stack form elements on mobile */
  .task-form {
    flex-direction: column;
    gap: 10px;
  }
}

/* ===== ANIMATIONS EXAMPLE ===== */
/*
Animations make interfaces feel alive.
Use them sparingly and purposefully.
*/
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-out;
}

/* ===== COMMENTS EXPLAINING CONCEPTS ===== */

/*
CSS CONCEPTS TO LEARN:

1. SELECTORS
   - Element selectors: body, header, h1
   - Class selectors: .task-manager, .task-form
   - ID selectors: #theme-toggle
   - Pseudo-classes: :hover, :focus, :active

2. BOX MODEL
   - margin: Space outside element
   - padding: Space inside element
   - border: Line around element
   - content: Actual content area

3. LAYOUT
   - display: flex (flexbox)
   - display: grid (grid)
   - position: relative/absolute/fixed
   - float (older method)

4. TYPOGRAPHY
   - font-family: Font choices
   - font-size: Text size
   - font-weight: Boldness
   - line-height: Spacing between lines

5. COLORS
   - Hex: #667eea
   - RGB: rgb(102, 126, 234)
   - RGBA: rgba(102, 126, 234, 0.5)
   - HSL: hsl(230, 50%, 60%)

6. UNITS
   - px: Pixels (fixed)
   - rem: Relative to root font size
   - em: Relative to parent font size
   - %: Percentage of parent
   - vh/vw: Viewport height/width

7. TRANSITIONS & ANIMATIONS
   - transition: Smooth property changes
   - animation: Keyframe animations
   - transform: Move, scale, rotate elements

8. RESPONSIVE DESIGN
   - Media queries: @media (max-width: 768px)
   - Mobile-first approach
   - Flexible layouts
   - Responsive images

9. ACCESSIBILITY
   - Focus states
   - Color contrast
   - Screen reader support
   - Keyboard navigation

10. PERFORMANCE
    - Efficient selectors
    - Minimal repaints
    - Optimized animations
    - CSS organization
*/
