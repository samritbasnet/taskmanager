/* ===== REFERENCE FILE - components.css ===== */
/*
This reference file shows how to build reusable components and utilities.
Study this to understand component-based CSS, then build your own!

LEARNING POINTS:
1. Reusable Component Patterns
2. Utility-First CSS Approach
3. Component Architecture
4. CSS Organization
5. Maintainable Code Structure
*/

/* ===== REUSABLE BUTTON COMPONENTS ===== */
/*
Buttons are the most common interactive elements.
Create a base class and modifiers for different styles.
*/

/* Base button class - Common styles for all buttons */
.btn {
  /* Layout */
  display: inline-flex;
  align-items: center;
  justify-content: center;

  /* Sizing */
  padding: 12px 24px;

  /* Appearance */
  border: none;
  border-radius: 8px;

  /* Typography */
  font-size: 1rem;
  font-weight: 500;

  /* Interaction */
  cursor: pointer;
  transition: all 0.3s ease;

  /* Content */
  text-decoration: none;
  white-space: nowrap;
  gap: 8px;
}

/* Button variants - Different styles for different purposes */
.btn-primary {
  background: var(--primary-gradient);
  color: white;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
  background: transparent;
  color: var(--primary-color);
  border: 2px solid var(--primary-color);
}

.btn-secondary:hover {
  background: var(--primary-color);
  color: white;
}

.btn-danger {
  background: var(--danger-color);
  color: white;
}

.btn-danger:hover {
  background: #ff5252;
  transform: translateY(-1px);
}

/* Button sizes - Different sizes for different contexts */
.btn-small {
  padding: 8px 16px;
  font-size: 0.9rem;
}

.btn-large {
  padding: 16px 32px;
  font-size: 1.1rem;
}

/* ===== CARD COMPONENTS ===== */
/*
Cards are containers for content.
They provide structure and visual hierarchy.
*/

.card {
  /* Appearance */
  background: var(--surface-color);
  border-radius: 12px;
  padding: 24px;
  box-shadow: var(--shadow-sm);
  border: 1px solid var(--border-color);

  /* Animation */
  transition: var(--transition);
}

.card:hover {
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
}

/* Card sections - Structure within cards */
.card-header {
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid var(--border-color);
}

.card-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.card-body {
  color: var(--text-secondary);
}

/* ===== FORM COMPONENTS ===== */
/*
Forms need consistent styling and good UX.
Focus states and validation are crucial.
*/

.form-group {
  margin-bottom: 20px;
}

.form-label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--text-primary);
}

.form-input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  transition: var(--transition);
  background: var(--surface-color);
  color: var(--text-primary);
}

.form-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-input::placeholder {
  color: var(--text-muted);
}

.form-error {
  color: var(--danger-color);
  font-size: 0.9rem;
  margin-top: 4px;
}

/* ===== BADGE COMPONENTS ===== */
/*
Badges show status, categories, or labels.
They should be small and informative.
*/

.badge {
  /* Layout */
  display: inline-flex;
  align-items: center;

  /* Sizing */
  padding: 4px 12px;
  border-radius: 20px;

  /* Typography */
  font-size: 0.8rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Badge variants - Different colors for different meanings */
.badge-primary {
  background: rgba(102, 126, 234, 0.1);
  color: var(--primary-color);
}

.badge-success {
  background: rgba(76, 175, 80, 0.1);
  color: var(--success-color);
}

.badge-warning {
  background: rgba(255, 152, 0, 0.1);
  color: var(--warning-color);
}

.badge-danger {
  background: rgba(255, 107, 107, 0.1);
  color: var(--danger-color);
}

/* ===== LOADING COMPONENTS ===== */
/*
Loading states provide user feedback.
They should be smooth and non-intrusive.
*/

.loading {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 3px solid rgba(102, 126, 234, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary-color);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

/* ===== TOOLTIP COMPONENTS ===== */
/*
Tooltips provide additional information.
They should be accessible and non-intrusive.
*/

.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
  background: var(--text-primary);
  color: var(--surface-color);
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 0.8rem;
  white-space: nowrap;
  opacity: 0;
  visibility: hidden;
  transition: var(--transition);
  z-index: 1000;
}

.tooltip:hover::after {
  opacity: 1;
  visibility: visible;
}

/* ===== ANIMATION COMPONENTS ===== */
/*
Animations make interfaces feel alive.
Use them sparingly and purposefully.
*/

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

/* Animation classes - Apply to elements */
.fade-in {
  animation: fadeIn 0.5s ease-out;
}

.slide-in {
  animation: slideIn 0.3s ease-out;
}

.scale-in {
  animation: scaleIn 0.3s ease-out;
}

/* ===== UTILITY CLASSES ===== */
/*
Utility classes provide single-purpose styles.
They follow the utility-first CSS approach.
*/

/* Text utilities */
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}

/* Margin utilities */
.mt-1 {
  margin-top: 8px;
}
.mt-2 {
  margin-top: 16px;
}
.mt-3 {
  margin-top: 24px;
}
.mt-4 {
  margin-top: 32px;
}

.mb-1 {
  margin-bottom: 8px;
}
.mb-2 {
  margin-bottom: 16px;
}
.mb-3 {
  margin-bottom: 24px;
}
.mb-4 {
  margin-bottom: 32px;
}

.ml-1 {
  margin-left: 8px;
}
.ml-2 {
  margin-left: 16px;
}
.ml-3 {
  margin-left: 24px;
}

.mr-1 {
  margin-right: 8px;
}
.mr-2 {
  margin-right: 16px;
}
.mr-3 {
  margin-right: 24px;
}

/* Padding utilities */
.p-1 {
  padding: 8px;
}
.p-2 {
  padding: 16px;
}
.p-3 {
  padding: 24px;
}
.p-4 {
  padding: 32px;
}

.px-1 {
  padding-left: 8px;
  padding-right: 8px;
}
.px-2 {
  padding-left: 16px;
  padding-right: 16px;
}
.px-3 {
  padding-left: 24px;
  padding-right: 24px;
}

.py-1 {
  padding-top: 8px;
  padding-bottom: 8px;
}
.py-2 {
  padding-top: 16px;
  padding-bottom: 16px;
}
.py-3 {
  padding-top: 24px;
  padding-bottom: 24px;
}

/* Display utilities */
.d-flex {
  display: flex;
}
.d-inline-flex {
  display: inline-flex;
}
.d-block {
  display: block;
}
.d-none {
  display: none;
}

/* Flexbox utilities */
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.justify-around {
  justify-content: space-around;
}

.align-center {
  align-items: center;
}
.align-start {
  align-items: flex-start;
}
.align-end {
  align-items: flex-end;
}

.flex-column {
  flex-direction: column;
}
.flex-row {
  flex-direction: row;
}

.flex-1 {
  flex: 1;
}
.flex-wrap {
  flex-wrap: wrap;
}

/* Sizing utilities */
.w-full {
  width: 100%;
}
.h-full {
  height: 100%;
}

/* Border utilities */
.rounded {
  border-radius: 8px;
}
.rounded-lg {
  border-radius: 12px;
}
.rounded-full {
  border-radius: 50%;
}

/* Shadow utilities */
.shadow {
  box-shadow: var(--shadow-sm);
}
.shadow-md {
  box-shadow: var(--shadow-md);
}
.shadow-lg {
  box-shadow: var(--shadow-lg);
}

/* Cursor utilities */
.cursor-pointer {
  cursor: pointer;
}
.cursor-not-allowed {
  cursor: not-allowed;
}

/* Overflow utilities */
.overflow-hidden {
  overflow: hidden;
}
.overflow-auto {
  overflow: auto;
}

/* Position utilities */
.position-relative {
  position: relative;
}
.position-absolute {
  position: absolute;
}
.position-fixed {
  position: fixed;
}

/* Z-index utilities */
.z-1 {
  z-index: 1;
}
.z-10 {
  z-index: 10;
}
.z-100 {
  z-index: 100;
}
.z-1000 {
  z-index: 1000;
}

/* ===== RESPONSIVE UTILITIES ===== */
/*
Responsive utilities hide/show elements on different screen sizes.
They follow mobile-first approach.
*/

@media (max-width: 768px) {
  .d-md-none {
    display: none;
  }
  .d-md-block {
    display: block;
  }
  .d-md-flex {
    display: flex;
  }
}

@media (max-width: 480px) {
  .d-sm-none {
    display: none;
  }
  .d-sm-block {
    display: block;
  }
  .d-sm-flex {
    display: flex;
  }
}

/* ===== COMMENTS EXPLAINING COMPONENT CONCEPTS ===== */

/*
COMPONENT-BASED CSS CONCEPTS TO LEARN:

1. COMPONENT ARCHITECTURE
   - Single responsibility principle
   - Reusable and composable
   - Consistent naming conventions
   - Modular structure

2. UTILITY-FIRST CSS
   - Single-purpose classes
   - Rapid development
   - Consistent spacing
   - Reduced CSS file size

3. CSS ORGANIZATION
   - Logical grouping
   - Clear comments
   - Consistent formatting
   - Easy maintenance

4. COMPONENT PATTERNS
   - Base class + modifiers
   - Composition over inheritance
   - Flexible and extensible
   - Predictable behavior

5. NAMING CONVENTIONS
   - BEM methodology
   - Semantic naming
   - Consistent prefixes
   - Clear hierarchy

6. RESPONSIVE DESIGN
   - Mobile-first approach
   - Breakpoint strategy
   - Flexible layouts
   - Progressive enhancement

7. ACCESSIBILITY
   - Focus states
   - Screen reader support
   - Keyboard navigation
   - Color contrast

8. PERFORMANCE
   - Efficient selectors
   - Minimal specificity
   - Optimized animations
   - Reduced repaints

9. MAINTENABILITY
   - DRY principle
   - Consistent patterns
   - Clear documentation
   - Easy updates

10. SCALABILITY
    - Modular architecture
    - Extensible design
    - Team collaboration
    - Future-proofing
*/
